using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Operations;

namespace Memoria
{
    public partial class GameForm : Form
    {
        /// <summary>
        /// Less Click more score. 
        /// </summary>
        private int countOfThePlayClick = 0;

        /// <summary>
        /// Use this bool to diverge newgame and formergame. 
        /// </summary>
        private bool itWasANewGame;

        //private GameData SelectedGameData;
        //private GamerData SelectedGamer;

        private const int ButtonSize = 60;
        private const int TopMargin = 30;
        private const int LeftMargin = 10;
        private readonly Color BasicBackColor = Color.Gray;
        private const int TableSize = 4;
        private const int RandomColorNumber = 100;
        private const string GameIsOverText = "Játék vége!";
        private const string GameIsOverTime = "Játékidő: {0}";
        private const string GameISOverScore = "Elért pontszám: {0}";
        private const string NoDataFound = "Nincs Adat";
        private const string NewGameSavedSuccessfully = "Az új játék mentésre került.";
        private const string GameSavedSuccessfully = "A játék mentésre került.";
        private const string ReallyWantToExitText = "Valóban ki szeretne lépni?";

        /// <summary>
        /// List of the playable buttons
        /// </summary>
        private List<Button> button_List = new List<Button>();

        /// <summary>
        /// An array of 8 colors, every color is occured twice, the colors randomly generated by Random x after Start_Click
        /// </summary>
        private Color[] colorArray = { Color.Red, Color.Green, Color.Blue, Color.Black, Color.Purple, Color.Orange, Color.Brown, Color.Yellow,
                                       Color.Red, Color.Green, Color.Blue, Color.Black, Color.Purple, Color.Orange, Color.Brown, Color.Yellow, };

        /// <summary>
        /// An array for the two buttons the player actually plays with.
        /// </summary>
        private Button[] temporary_Button = new Button[2];

        /// <summary>
        /// An integer for Timer2
        /// </summary>
        private int timer2GameTimeValue = 0;

        /// <summary>
        /// Axis y.
        /// </summary>
        private const int Button_i = 4;

        /// <summary>
        /// Axis x.
        /// </summary>
        private const int Button_j = 4;

        private GameData SelectedGameData
        {
            get;set;
        }

        private GamerData SelectedGamer
        {
            get;
        }
        /// <summary>
        /// Fresh button data to save them.
        /// </summary>
        private List<ButtonData> FreshButtonDataDuringAGame
        { 
            get
            {
                List<ButtonData> actualButtonsData = new List<ButtonData>();

                actualButtonsData.Clear();

                for (int i = 0; i < button_List.Count; i++)
                {
                    int visibility;

                    visibility = button_List[i].Visible ? 1 : 0;

                    actualButtonsData.Add(new ButtonData(SelectedGameData.GameID, Convert.ToInt32(button_List[i].Name),
                                                colorArray[i].ToArgb(), visibility));
                }
                return actualButtonsData;
            }
        }

        public GameForm(GameData selectedGameData, GamerData selectedGamerData, bool itWasaAnewGame)
        {
            SelectedGameData = selectedGameData;
            SelectedGamer = selectedGamerData;
            itWasANewGame = itWasaAnewGame;

            InitializeComponent();
        }

        private void GameForm_Load(object sender, EventArgs e)
        {
            labelRecorderName.Text =
            labelRecord.Text = NoDataFound;

            if (itWasANewGame)//Newgame way, everything is set to basic, new color order.
            {
                ButtonMaker();

                Random x = new Random();

                for (int i = 0; i < RandomColorNumber; i++)
                {
                    int y = x.Next(0, colorArray.Length);
                    int z = x.Next(0, colorArray.Length);

                    Color save = colorArray[y];
                    colorArray[y] = colorArray[z];
                    colorArray[z] = save;
                }

                timer2GameInterval.Start();
            }
            else//Formergame data set before continue the game.
            {
                countOfThePlayClick = SelectedGameData.GamerClickCount;
                timer2GameTimeValue = SelectedGameData.SaveGameTime;

                ButtonMaker();

                List<ButtonData> selectedGameButtonsData;

                if(Operations.DataAndMethodsForMemory.SelectedFormerGameButtonsDownload
                                              (SelectedGameData.GameID, out selectedGameButtonsData))
                {
                    //Set the visibility of the saved buttons.
                    for (int i = 0; i < selectedGameButtonsData.Count; i++)
                    {
                        button_List[i].Visible = selectedGameButtonsData[i].ButtonVisible == 1;// ? true : false;
                        colorArray[i] = Color.FromArgb(selectedGameButtonsData[i].ButtonColor);
                    }
                    timer2GameInterval.Start();
                }
                else
                {
                    this.Close();
                }
            }

            if(Operations.DataAndMethodsForMemory.RecordsDataDownload())
            {
                RecordData topRecordData = Operations.DataAndMethodsForMemory.RecordDataList.OrderByDescending
                    (y => y.Score).FirstOrDefault();

                if (topRecordData != null)
                {
                    string topGamerName = Operations.DataAndMethodsForMemory.GamerNameList.FirstOrDefault(x => x.GamerID == topRecordData.GamerID).GamerName;

                    if (topGamerName != null)
                    {
                        labelRecorderName.Text = topGamerName;
                        labelRecord.Text = Operations.DataAndMethodsForMemory.RecordDataList.Max
                                                             (x => x.Score).ToString();
                    }
                }
                this.Text = SelectedGamer.GamerName;
            }
        }
        /// <summary>
        /// Make the playable buttons for the game, it is not nessesery to use ButtonMaker, it makes the code appearance a bit simpler.                                                                                                          
        /// </summary>
        private void ButtonMaker()
        {
            for (int i = button_List.Count - 1; i >= 0; i--)
            {
                button_List[i].Dispose();
                button_List.Remove(button_List[i]);
            }

            for (int i = 0; i < Button_i; i++)
            {
                for (int j = 0; j < Button_j; j++)
                {
                    Button a = new Button();

                    a.Height = ButtonSize;
                    a.Width = ButtonSize;
                    a.Top = TopMargin + i * ButtonSize;
                    a.Left = LeftMargin + j * ButtonSize;
                    a.Parent = this;
                    a.BackColor = BasicBackColor;
                    a.Name = (i * TableSize + j).ToString();//Create here a number(name). When Color is mixed Color array indexs
                                                                            //and button names(numbers) are bounded by these numbers.
                    button_List.Add(a);

                    a.Click += playClick;
                }
            }
        }
        /// <summary>
        /// Inspection make an inspection on the button_List wether the button visible or not visible, if the visibility is false counter is increased,
        /// if the counter and the number of the button are the same the game is over,
        /// </summary>
        private void GameEndInspection()
        {
            int counter = 0;//Counts the visibility of the buttons left.
            for (int i = 0; i < button_List.Count; i++)
            {
                if (!button_List[i].Visible)
                {
                    counter++;
                }
            }
            if (counter == button_List.Count)
            {
                int finishedGameScore = Operations.DataAndMethodsForMemory.TimeBonus(timer2GameTimeValue) +
                                        Operations.DataAndMethodsForMemory.GameClickScoreMaker(countOfThePlayClick);

                if (Operations.DataAndMethodsForMemory.RecordSave(new RecordData(SelectedGamer.GamerID, DateTime.Now, countOfThePlayClick, timer2GameTimeValue,
                    (finishedGameScore))))
                {
                    for (int i = button_List.Count - 1; i >= 0; i--)//When game is over the buttons should be swiped out from the memory properly.
                    {
                        button_List[i].Dispose();
                        button_List.Remove(button_List[i]);
                    }

                    timer2GameInterval.Stop();

                    MessageBox.Show(GameIsOverText + Environment.NewLine + String.Format(GameIsOverTime, TimeSpan.FromSeconds(timer2GameTimeValue)) +
                                                     Environment.NewLine + String.Format(GameISOverScore, finishedGameScore));
                    timer2GameTimeValue = 0;
                }
                this.Close();
            }
        }

        /// <summary>
        /// When Player clicked on two buttons this method fills up the temporary array with the two clicked button and disable the other buttons.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void playClick(object sender, EventArgs e)
        {
            if (temporary_Button[0] == null || temporary_Button[1] == null)
            {     //Get clicked buttons and set color using the name of the button (name of the button is the "serial number")
                (sender as Button).BackColor = colorArray[Convert.ToInt32((sender as Button).Name)];
            }

            if (temporary_Button[0] == null)
            {
                temporary_Button[0] = sender as Button;

                temporary_Button[0].Enabled = false;
            }
            else if (temporary_Button[1] == null)
            {
                temporary_Button[1] = sender as Button;

                for (int i = 0; i < button_List.Count; i++)//Set Enable to false avoid a multilpe selection.
                {
                    button_List[i].Enabled = false;
                }

                timerClickInterval.Start();//To memorise the position and the colors of the buttons a 3 minutes pause started by this timer.
            }
            countOfThePlayClick++;
        }

        private void buttonCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        /// <summary>
        /// Compare the two selected Buton. If they are the same both button.Visible set to false. If not Backcolor set to Basic. Timer interval is 3000. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer1_Tlick(object sender, EventArgs e)
        {
            if (temporary_Button[0] != null || temporary_Button[1] != null)
            {
                timerClickInterval.Stop();

                if (temporary_Button[0].BackColor == temporary_Button[1].BackColor)
                {
                    temporary_Button[0].Visible =
                    temporary_Button[1].Visible = false;

                }
                else
                    temporary_Button[0].BackColor =
                    temporary_Button[1].BackColor = BasicBackColor;

                for (int i = 0; i < button_List.Count; i++)//To prevent player to be able to select a third button after a second selection buttons.Enable are false.
                {                                            //Here set them back to true.
                    button_List[i].Enabled = true;
                }

                temporary_Button[0] =
                temporary_Button[1] = null;

                GameEndInspection();
            }
        }
        /// <summary>
        /// Timer2 measures the gametime.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer2GameInterval_Tick(object sender, EventArgs e)
        {
            timer2GameTimeValue++;
            gameTime.Text = TimeSpan.FromSeconds(timer2GameTimeValue).ToString();
        }
        /// <summary>
        /// Player can save the actual situation of the game (buttons, colors, gametime, clickcount)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonSaveGame_Click(object sender, EventArgs e)
        {
            if (itWasANewGame)//Switch to newGame way
            {
                GameData newGameData = new GameData(timer2GameTimeValue, DateTime.Now, SelectedGamer.GamerID, countOfThePlayClick);
                //Here get the GameID after the save into the Database.
                int newGameID;

                if(Operations.DataAndMethodsForMemory.SaveNewGameData(newGameData, out newGameID))
                {
                    if(Operations.DataAndMethodsForMemory.GamesDataDownload())
                    {
                        //Here set gameData to selectedGame to be able to save the Buttons for the game and other saves.
                        SelectedGameData = Operations.DataAndMethodsForMemory.GameDataList.FirstOrDefault(x => x.GameID == newGameID);

                        if (SelectedGameData != null)
                        {
                            //Save Buttondata
                            if(Operations.DataAndMethodsForMemory.SaveNewGameButtons(FreshButtonDataDuringAGame))
                            {
                                MessageBox.Show(NewGameSavedSuccessfully);
                                itWasANewGame = false;
                            }
                        }
                    }
                }
            }
            else if (!itWasANewGame)//switch to former gamesave (after a new game was saved it handled as a formergame).
            {
                if(Operations.DataAndMethodsForMemory.SelectedFormerGameDataUpdate(new GameData(SelectedGameData.GameID,
                    timer2GameTimeValue, DateTime.Now, SelectedGamer.GamerID, countOfThePlayClick)))
                {
                    if(Operations.DataAndMethodsForMemory.SaveASelectedFormerGameButtons(FreshButtonDataDuringAGame))
                    {
                        MessageBox.Show(GameSavedSuccessfully);
                    }
                }
             }
         }

        private void FormClosingDuties ()
        {
            timer2GameInterval.Stop();
            timerClickInterval.Stop();
            DialogResult = DialogResult.Cancel;
        }
        /// <summary>
        /// To close the game form properly this event stops the timers. Before clsing messageBox popped up.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GameForm_FormClosing(object sender, FormClosingEventArgs e)
        {   
            if(button_List.Count == 0)
            {
                FormClosingDuties();
            }
            else
            {
                if (e.CloseReason == CloseReason.UserClosing)
                {
                    DialogResult reallyWantToExit = MessageBox.Show(ReallyWantToExitText, "", MessageBoxButtons.YesNo);

                    if (reallyWantToExit == DialogResult.Yes)
                    {
                        FormClosingDuties();
                    }
                    else if (reallyWantToExit == DialogResult.No)
                    {
                        e.Cancel = true;
                    }
                    else if (DialogResult == DialogResult.Cancel)
                    {
                        this.Close();
                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
        }
    }
 }


